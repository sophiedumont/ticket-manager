[{"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/index.tsx":"1","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/reportWebVitals.ts":"2","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/App.tsx":"3","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/Login.tsx":"4","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/Tickets.tsx":"5","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/TicketTable.tsx":"6","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/CreateTicket.tsx":"7","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/Layout.tsx":"8","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/TicketForm.tsx":"9","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/UpdateTicket.tsx":"10","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/common/theme.ts":"11","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/Redux/store.ts":"12","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/Redux/User/reducer.ts":"13","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/Redux/User/constants.ts":"14","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/Redux/User/action.ts":"15","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/common/requestService.ts":"16","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/Redux/Ticket/reducer.ts":"17","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/Redux/Ticket/constants.ts":"18","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/Redux/Ticket/actions.ts":"19","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/CustomeDataGrid.tsx":"20","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/common/usePrevious.ts":"21","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/Register.tsx":"22","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/common/authTheme.ts":"23","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/PrivateRoute.tsx":"24"},{"size":846,"mtime":1612113199134,"results":"25","hashOfConfig":"26"},{"size":425,"mtime":1611946048725,"results":"27","hashOfConfig":"26"},{"size":1186,"mtime":1612117669437,"results":"28","hashOfConfig":"26"},{"size":3111,"mtime":1612117604180,"results":"29","hashOfConfig":"26"},{"size":820,"mtime":1612116835895,"results":"30","hashOfConfig":"26"},{"size":3818,"mtime":1612116835902,"results":"31","hashOfConfig":"26"},{"size":1397,"mtime":1612107199164,"results":"32","hashOfConfig":"26"},{"size":1336,"mtime":1612114668008,"results":"33","hashOfConfig":"26"},{"size":6258,"mtime":1612114892749,"results":"34","hashOfConfig":"26"},{"size":1963,"mtime":1612112369129,"results":"35","hashOfConfig":"26"},{"size":787,"mtime":1612109066796,"results":"36","hashOfConfig":"26"},{"size":814,"mtime":1612113157703,"results":"37","hashOfConfig":"26"},{"size":2029,"mtime":1612116715519,"results":"38","hashOfConfig":"26"},{"size":644,"mtime":1612113981430,"results":"39","hashOfConfig":"26"},{"size":2153,"mtime":1612114770333,"results":"40","hashOfConfig":"26"},{"size":681,"mtime":1612053174444,"results":"41","hashOfConfig":"26"},{"size":2657,"mtime":1612111996208,"results":"42","hashOfConfig":"26"},{"size":753,"mtime":1612110001204,"results":"43","hashOfConfig":"26"},{"size":2328,"mtime":1612111766639,"results":"44","hashOfConfig":"26"},{"size":3239,"mtime":1612082079306,"results":"45","hashOfConfig":"26"},{"size":199,"mtime":1612112728124,"results":"46","hashOfConfig":"26"},{"size":3987,"mtime":1612116080899,"results":"47","hashOfConfig":"26"},{"size":336,"mtime":1612107483696,"results":"48","hashOfConfig":"26"},{"size":561,"mtime":1612116258617,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hntfc",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/index.tsx",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/reportWebVitals.ts",[],["100","101"],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/App.tsx",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/Login.tsx",["102","103"],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/Tickets.tsx",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/TicketTable.tsx",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/CreateTicket.tsx",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/Layout.tsx",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/TicketForm.tsx",["104"],"import React, { useEffect, useState } from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport { Save } from '@material-ui/icons'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { rootState } from '../Redux/store'\nimport { useHistory } from 'react-router-dom'\nimport { resetCreateTicketError, resetUpdateTicketError, resetTicketSuccess } from '../Redux/Ticket/actions'\nimport { Snackbar } from '@material-ui/core'\nimport { Alert } from '@material-ui/lab'\nimport Box from '@material-ui/core/Box'\nimport { TicketModel } from '../Redux/Ticket/reducer'\nimport { usePrevious } from '../common/usePrevious'\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n    button: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      marginRight: theme.spacing(3),\n    },\n  }),\n);\n\nexport interface TicketFormProps {\n  handleSubmit: (subject:string, content:string, type:string, priority:string) => Promise<void>\n  ticket?: TicketModel\n}\n\nexport default function TicketForm({ handleSubmit, ticket }: TicketFormProps) {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const [subject, setSubject] = useState(ticket ? ticket.subject : '');\n  const [content, setContent] = useState(ticket ? ticket.content : '');\n  const [type, setType] = useState(ticket ? ticket.type : '');\n  const [priority, setPriority] = useState(ticket ? ticket.priority : '');\n\n  const updateSuccess = useSelector((state: rootState) => state.ticket.updatedTicket)\n  const createSuccess = useSelector((state: rootState) => state.ticket.createdTicket)\n  const createError = useSelector((state: rootState) => state.ticket.getCreatedTicketsError)\n  const updateError = useSelector((state: rootState) => state.ticket.updateTicketError)\n  let history = useHistory();\n\n  const prevTicket: TicketModel = usePrevious<TicketModel>(ticket);\n\n  useEffect(()=>{\n    if ((!prevTicket && ticket) || (ticket && prevTicket.id !== ticket.id)) {\n      setSubject(ticket.subject);\n      setContent(ticket.content);\n      setType(ticket.type);\n      setPriority(ticket.priority);\n    }\n  }, [ticket])\n\n  const onSubmitTicket = async () => {\n    await handleSubmit(subject, content, type, priority)\n  }\n\n  const handleCloseSnackBarSuccess = () => {\n    dispatch(resetTicketSuccess());\n    history.push(\"/tickets\");\n  }\n\n  const handleCloseSnackBar = () => {\n    dispatch(resetCreateTicketError());\n    dispatch(resetUpdateTicketError());\n  }\n\n  const handleChangePriority = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setPriority(event.target.value as string);\n  };\n  const handleChangeType = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setType(event.target.value as string);\n  };\n\n  return (\n      <Grid container spacing={3} >\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            id=\"subject\"\n            value={subject}\n            name=\"subject\"\n            label=\"Subject\"\n            fullWidth\n            onChange={e =>setSubject(e.target.value)}\n            autoComplete=\"subject\"\n          />\n        </Grid>\n        <Grid item xs={12} sm={12}>\n            <FormControl className={classes.formControl}>\n              <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\" required>\n                Priority\n              </InputLabel>\n              <Select\n                labelId=\"demo-simple-select-placeholder-label-label\"\n                id=\"demo-simple-select-placeholder-label\"\n                value={priority}\n                onChange={handleChangePriority}\n                displayEmpty\n                className={classes.selectEmpty}\n              >\n                <MenuItem value={'high'}>High</MenuItem>\n                <MenuItem value={'medium'}>Medium</MenuItem>\n                <MenuItem value={'low'}>Low</MenuItem>\n              </Select>\n            </FormControl>\n            <FormControl className={classes.formControl}>\n              <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\" required>\n                Type\n              </InputLabel>\n              <Select\n                labelId=\"demo-simple-select-placeholder-label-label\"\n                id=\"demo-simple-select-placeholder-label\"\n                value={type}\n                onChange={handleChangeType}\n                displayEmpty\n                className={classes.selectEmpty}\n              >\n                <MenuItem value={'question'}>Question</MenuItem>\n                <MenuItem value={'bug'}>Bug</MenuItem>\n              </Select>\n            </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            required\n            id=\"content\"\n            name=\"content\"\n            value={content}\n            label=\"Content\"\n            fullWidth\n            autoComplete=\"content\"\n            multiline={true}\n            onChange={e =>setContent(e.target.value)}\n            rows={4}\n          />\n        </Grid>\n        <Box display=\"flex\" justifyContent={'flex-end'}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={onSubmitTicket}\n            startIcon={<Save/>}\n          >Save\n          </Button>\n        </Box>\n        <Snackbar open={createSuccess || updateSuccess} autoHideDuration={2000} onClose={handleCloseSnackBarSuccess}>\n          <Alert onClose={handleCloseSnackBarSuccess} severity=\"success\">\n            Ticket saved !\n          </Alert>\n        </Snackbar>\n          <Snackbar open={createError || updateError} autoHideDuration={6000} onClose={handleCloseSnackBar}>\n            <Alert onClose={handleCloseSnackBar} severity=\"error\">\n              Ticket not created. Fill each field.\n            </Alert>\n          </Snackbar>\n      </Grid>\n\n  );\n}","/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/UpdateTicket.tsx",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/common/theme.ts",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/Redux/store.ts",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/Redux/User/reducer.ts",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/Redux/User/constants.ts",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/Redux/User/action.ts",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/common/requestService.ts",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/Redux/Ticket/reducer.ts",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/Redux/Ticket/constants.ts",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/Redux/Ticket/actions.ts",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/CustomeDataGrid.tsx",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/common/usePrevious.ts",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/Register.tsx",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/common/authTheme.ts",[],"/Users/sophiedumont/Desktop/git-ticket-manager/ticket-manager/ticket-manager/src/components/PrivateRoute.tsx",[],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":26,"column":9,"nodeType":"111","messageId":"112","endLine":26,"endColumn":17},{"ruleId":"113","severity":1,"message":"114","line":36,"column":6,"nodeType":"115","endLine":36,"endColumn":17,"suggestions":"116"},{"ruleId":"113","severity":1,"message":"117","line":68,"column":6,"nodeType":"115","endLine":68,"endColumn":14,"suggestions":"118"},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"@typescript-eslint/no-unused-vars","'jwtToken' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["121"],"React Hook useEffect has a missing dependency: 'prevTicket'. Either include it or remove the dependency array.",["122"],"no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},"Update the dependencies array to be: [canUseApp, history]",{"range":"127","text":"128"},"Update the dependencies array to be: [prevTicket, ticket]",{"range":"129","text":"130"},[1366,1377],"[canUseApp, history]",[2615,2623],"[prevTicket, ticket]"]